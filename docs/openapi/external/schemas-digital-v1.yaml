components:
  schemas:
    
    #############################################################################################
    ###                     RICHIESTE DI INVIO DI MESSAGGISTICA DIGITALE                      ###
    #############################################################################################
    BaseDigitalMessageRequest:
      title: Schema base per i messaggi digitali
      required:
        - requestId
        - eventType
        - qos
        - clientRequestTimeStamp 
        - channel    
        - receiverDigitalAddress
        - messageText      
      type: object
      properties:
        requestId:
          type: string
          description: >-
            Identificativo della richiesta.
        correlationId:
          type: string
          description: >-
            Id di correlazione, permette al sender di correlare eventualmente la response. Se assente viene inizializzato con il requestId
        eventType:
          type: string
          description: >-
            Tipologia di richiesta. Permette di identificare il tipo di informazione che viene richiesto. 
            Permette di clusterizzare le tipologie di comunicazione in ingresso 
            (se sender diversi usano EventType diversi, a fini ad es di fatturazione diventa semplice individuare gli oggetti).        
        qos:
          type: string
          enum:
            - INTERACTIVE
            - BATCH
          description: >-
            Interactive/Batch (quality of service, "entro quanto tempo" devo rispondere, con che livello di servizio)
        tags:
          type: object
          properties:
          # Durante la generazione delle classi Java, non riesce a gestire la presenza di valori di default all'interno di una mappa
          #            iun:
          #              type: string
          #              description: >-
          #                Identificativo Unico della Notifica.
          #                Non è obbligatorio (ad es in una richiesta di verifica indirizzi non abbiamo un identificativo di notifica).
          #          required:
          #            - iun
          additionalProperties:
            type: string
        clientRequestTimeStamp:
          type: string
          format: date-time
          description: >-
            Timestamp della richiesta in UTC con timezone
        receiverDigitalAddress:
          type: string
          description: >-
            Indirizzo PEC del destinatario (o in genere recapito digitale certificato a valore legale). 
            L’indirizzo si assume valido ed attivo: i servizi erogatori non eseguono ulteriori validazioni sullo stesso.
            Non sono previste mail con più destinatari. 
            In caso di comunicazioni a più destinatari saranno richieste più comunicazioni (in questo modo avremo un requestId univoco per ogni comunicazione/evento/pec).
        messageText:
          type: string
          description: >-
            Testo del corpo della comunicazione digitale.  
            Può essere a discrezione del chiamante in plain text od html (un campo ad hoc che discrimini il formato è opportuno?).
        senderDigitalAddress:
          type: string
          description: >-
            Indirizzo PEC (o analoga comunicazione digitale a valore legale) del mittente della comunicazione.
            Se non passato va recuperato da configurazione sulla base del sistema chiamante (i.e. X-PagoPA-EXTCH-CX), 
            va censito in configurazione (obbligatorio).

    ### - PEC, REM, SERCQ, ....
    ###########################################
    DigitalNotificationRequest:
      title: schema per notifiche a valore legale, con allegati
      allOf:
        - $ref: '#/components/schemas/BaseDigitalMessageRequest'
        - type: object
          required:
            - channel    
            - subjectText
            - messageContentType
          properties:
            channel:
              type: string
              enum:
                - PEC
                - REM            
              description: >-
                Canale di recapito con cui il Sender chiede l’erogazione del servizio. In un primo momento sarà PEC, 
                ma il dominio dovrà prevedere a breve SERQ, PEC_REM, ed in futuro ogni forma di recapito digitale a valore legale.            
            subjectText:
              type: string
              description: >-
                Oggetto del corpo della comunicazione digitale.
            messageContentType:
              type: string
              enum:
                - 'text/plain'
                - 'text/html'
              description: >-
                Formato: HTML o PLAIN 
            attachmentUrls:
              type: array
              items:
                type: string
                description: >-
                  Path in cui si trova il documento da allegare alla comunicazione digitale
                  (i.e. url del file dentro Safe Storage che si occuperà di crypt/decrypt dei documenti).
                  Il Safe Storge si occuperà di calcolare la presigned url per il recupero dell'allegato che sarà decifrato.
                  documentUrl può rispondere (alla GET) con un 403 per redirect vs servizio (i.e. lambda, safe storage, presigned url vs bucket s3 non cifrato). 
    
    ### - EMAIL
    ###########################################
    DigitalCourtesyMailRequest:
      title: schema per notifiche __senza__ valore legale, con allegati.
      allOf:
        - $ref: '#/components/schemas/DigitalNotificationRequest'
        - type: object
          required:
            - channel    
          properties:
            channel:
              type: string
              enum:
                - EMAIL          
              description: >-
                Canale di recapito con cui il Sender chiede l’erogazione del servizio. Per ora solo email
    
    ### - SMS
    ###########################################
    DigitalCourtesySmsRequest:
      title: schema per notifiche brevi __senza__ valore legale.
      allOf:
        - $ref: '#/components/schemas/BaseDigitalMessageRequest'
        - type: object
          required:
            - channel
          properties:
            channel:
              type: string
              enum:
                - SMS          
              description: >-
                Canale di recapito con cui il Sender chiede l’erogazione del servizio. In un primo momento sarà PEC, 
                ma il dominio dovrà prevedere a breve SERQ, PEC_REM, ed in futuro ogni forma di recapito digitale a valore legale.            
    

    #############################################################################################
    ###                     EVENTI DI PROGRESSIONE MESSAGGISTICA DIGITALE                     ###
    #############################################################################################
  
    ProgressEventCategory:
      type: string
      enum:
        - PROGRESS
        - OK
        - ERROR

    DigitalMessageReference:
      type: object
      required:
        - system
        - id
      properties:
        system: 
          type: string
        id: 
          type: string
        location:
          type: string
        

    BaseMessageProgressEvent:
      title: Schema base per gli eventi di avanzamento messaggi digitali
      type: object
      required:
        - requestId
        - eventTimestamp
        - status
      properties:
        requestId:
          type: string
        eventTimestamp:
          description: >
            timestamp della creazione dell'evento, in UTC con definizione della timezione 
            secondo rfc 3339
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/ProgressEventCategory'
        eventDetails:
          type: string
        generatedMessage:
          $ref: '#/components/schemas/DigitalMessageReference'
      

    CourtesyMessageProgressEvent:
      title: Avanzamento per messaggi di cortesia
      allOf:
        - $ref: '#/components/schemas/BaseMessageProgressEvent'
        - type: object
          required:
            - eventCode
          properties:
            eventCode:
              type: string
              enum:
                - M003
                - M008
                - M011
                - M009
                - M010
                - S003
                - S008
                - S010
              description: >-
                * STATUS     EVENTCODE
                * OK         M003 = MAIL - Sent
                * ERROR      M008 = MAIL - Error
                * ERROR      M011 = MAIL - Composition error
                * ERROR      M009 = MAIL - Destination address not allowed
                * ERROR      M010 = MAIL - Internal error
                * OK         S003 = SMS - Sent
                * ERROR      S008 = SMS - Error
                * ERROR      S010 = SMS - Internal error
    
    LegalMessageSentDetails:
      title: Avanzamento per messaggi legali
      allOf:
        - $ref: '#/components/schemas/BaseMessageProgressEvent'
        - type: object
          required:
            - eventCode
          properties:
            eventCode:
              type: string
              enum:
                - C000
                - C001
                - C002
                - C003
                - C004
                - C005
                - C006
                - C007
                - C008
                - C009
                - C010
              description: >-
                * STATUS     EVENTCODE
                * PROGRESS   C000 = PEC - PREACCETTAZIONE (Conferma avvenuta comunicazione con Wrapper Pec)
                * PROGRESS   C001 = PEC - StatusPec.ACCETTAZIONE
                * PROGRESS   C005 = PEC - StatusPec.PRESA_IN_CARICO
                * PROGRESS   C007 = PEC - StatusPec.PREAVVISO_ERRORE_CONSEGNA
                * ERROR      C002 = PEC - StatusPec.NON_ACCETTAZIONE
                * ERROR      C004 = PEC - StatusPec.ERRORE_CONSEGNA
                * ERROR      C006 = PEC - StatusPec.RILEVAZIONE_VIRUS
                * ERROR      C008 = PEC - ERRORE_COMUNICAZIONE_SERVER_PEC
                * ERROR      C009 = PEC - ERRORE_DOMINIO_PEC_NON_VALIDO
                * ERROR      C010 = PEC - ERROR_INVIO_PEC
                * OK         C003 = PEC - StatusPec.AVVENUTA_CONSEGNA
